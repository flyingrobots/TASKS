{
  "meta": {
    "execution_model": "rolling_frontier",
    "min_confidence": 0.8,
    "resource_limits": {
      "max_concurrent_tasks": 4,
      "max_memory_gb": 16,
      "max_cpu_cores": 8,
      "max_disk_io_mbps": 200
    },
    "codebase_analysis": {
      "existing_components": [
        "docker-compose.ci.yml (partial)",
        ".github/workflows/*.yml",
        "public-website/scripts/vercel-build-sim.mjs", 
        ".githooks/pre-push (existing)"
      ],
      "reused_components": [
        "npm scripts infrastructure",
        "existing test configurations",
        "Vitest setup"
      ],
      "shared_resources": {
        "docker_compose_file": {
          "type": "exclusive",
          "location": "docker-compose.ci.yml",
          "constraint": "sequential_only"
        },
        "package_json": {
          "type": "exclusive",
          "location": "package.json",
          "constraint": "sequential_only"
        }
      }
    }
  },
  "generated": {
    "by": "T.A.S.K.S v3",
    "timestamp": "2025-08-26T23:20:00Z",
    "contentHash": "8a9b7c6d5e4f3a2b1c9d8e7f6a5b4c3d2e1f"
  },
  "tasks": [
    {
      "id": "P1.T001",
      "feature_id": "F001",
      "title": "Complete Docker Compose CI configuration",
      "description": "Finish docker-compose.ci.yml with exact GitHub Actions environment replication",
      "category": "foundation",
      "boundaries": {
        "expected_complexity": {
          "value": "~50 LoC",
          "breakdown": "Services config (30 LoC), volumes (10 LoC), networks (10 LoC)"
        },
        "definition_of_done": {
          "criteria": [
            "docker-compose.ci.yml validates without errors",
            "Container starts with Node 20.17.0",
            "Resource limits match GitHub Actions (4 CPU, 8GB RAM)",
            "PostgreSQL service healthy and accessible"
          ],
          "stop_when": "Do NOT implement test execution yet - just environment setup"
        },
        "scope": {
          "includes": ["docker-compose.ci.yml"],
          "excludes": ["test scripts", "application code"],
          "restrictions": "Only modify Docker configuration files"
        }
      },
      "execution_guidance": {
        "logging": {
          "on_start": "Log 'Starting Docker CI configuration' to epic/fix-ci-and-deployments/logs/P1.T001.log",
          "on_progress": "Log each service configuration completion",
          "on_completion": "Log 'Docker environment ready' with service list"
        },
        "checkpoints": [
          "After services defined: Validate YAML syntax",
          "After volumes configured: Test persistence",
          "Before completion: docker-compose config validation"
        ]
      },
      "resource_requirements": {
        "estimated": {
          "cpu_cores": 1,
          "memory_mb": 512,
          "exclusive_resources": ["docker_compose_file"]
        }
      },
      "skillsRequired": ["docker", "infrastructure"],
      "duration": {
        "optimistic": 0.5,
        "mostLikely": 1,
        "pessimistic": 2
      },
      "durationUnits": "hours",
      "acceptance_checks": [
        {
          "type": "command",
          "cmd": "docker-compose -f docker-compose.ci.yml config",
          "expect": {"exitCode": 0}
        }
      ]
    },
    {
      "id": "P1.T002",
      "feature_id": "F001",
      "title": "Create CI orchestration script",
      "description": "Implement scripts/ci-local.sh to orchestrate Docker-based CI simulation",
      "category": "implementation",
      "boundaries": {
        "expected_complexity": {
          "value": "~120 LoC",
          "breakdown": "Setup (20 LoC), Docker commands (40 LoC), Error handling (30 LoC), Reporting (30 LoC)"
        },
        "definition_of_done": {
          "criteria": [
            "Script starts Docker containers successfully",
            "Runs npm install in container",
            "Executes tests and captures results",
            "Cleans up containers on exit"
          ],
          "stop_when": "Do NOT implement change detection yet - just basic execution"
        },
        "scope": {
          "includes": ["scripts/ci-local.sh"],
          "excludes": ["change detection", "caching logic"],
          "restrictions": "Focus on orchestration only"
        }
      },
      "execution_guidance": {
        "logging": {
          "on_start": "Log 'Creating CI orchestration script'",
          "on_progress": "Log each major function implementation",
          "on_completion": "Log script path and usage instructions"
        }
      },
      "resource_requirements": {
        "estimated": {
          "cpu_cores": 1,
          "memory_mb": 256
        }
      },
      "skillsRequired": ["bash", "docker"],
      "duration": {
        "optimistic": 1,
        "mostLikely": 2,
        "pessimistic": 3
      },
      "durationUnits": "hours"
    },
    {
      "id": "P1.T003",
      "feature_id": "F002",
      "title": "Implement change detection algorithm",
      "description": "Create scripts/detect-changes.sh for intelligent file change detection",
      "category": "implementation",
      "boundaries": {
        "expected_complexity": {
          "value": "~80 LoC",
          "breakdown": "Git diff parsing (30 LoC), Path matching (30 LoC), Decision logic (20 LoC)"
        },
        "definition_of_done": {
          "criteria": [
            "Detects changes in public-website correctly",
            "Detects changes in admin-webtool correctly",
            "Identifies shared dependency changes",
            "Returns list of affected applications"
          ]
        },
        "scope": {
          "includes": ["scripts/detect-changes.sh"],
          "excludes": ["test execution", "Docker integration"]
        }
      },
      "execution_guidance": {
        "logging": {
          "on_start": "Log 'Implementing change detection'",
          "on_progress": "Log detection rules as implemented",
          "on_completion": "Log test results for various scenarios"
        }
      },
      "resource_requirements": {
        "estimated": {
          "cpu_cores": 1,
          "memory_mb": 128
        }
      },
      "skillsRequired": ["bash", "git"],
      "duration": {
        "optimistic": 1,
        "mostLikely": 1.5,
        "pessimistic": 2
      },
      "durationUnits": "hours"
    },
    {
      "id": "P1.T004",
      "feature_id": "F003",
      "title": "Configure Docker layer caching",
      "description": "Implement multi-layer caching strategy for optimal performance",
      "category": "optimization",
      "boundaries": {
        "expected_complexity": {
          "value": "~40 LoC",
          "breakdown": "Dockerfile optimization (20 LoC), Volume mounts (10 LoC), Cache config (10 LoC)"
        },
        "definition_of_done": {
          "criteria": [
            "npm cache persisted between runs",
            "Next.js build cache persisted",
            "Second run completes 50% faster than first"
          ]
        },
        "scope": {
          "includes": ["docker-compose.ci.yml", "Dockerfile.ci"],
          "excludes": ["application code", "test code"]
        }
      },
      "resource_requirements": {
        "estimated": {
          "cpu_cores": 1,
          "memory_mb": 256,
          "exclusive_resources": ["docker_compose_file"]
        }
      },
      "skillsRequired": ["docker", "performance"],
      "duration": {
        "optimistic": 0.5,
        "mostLikely": 1,
        "pessimistic": 1.5
      },
      "durationUnits": "hours"
    },
    {
      "id": "P1.T005",
      "feature_id": "F001",
      "title": "Add npm script integration",
      "description": "Create npm scripts in root package.json for CI simulation",
      "category": "integration",
      "boundaries": {
        "expected_complexity": {
          "value": "~15 LoC",
          "breakdown": "Script definitions (10 LoC), Documentation (5 LoC)"
        },
        "definition_of_done": {
          "criteria": [
            "npm run ci:local executes Docker CI",
            "npm run ci:setup initializes environment",
            "npm run ci:clean removes containers/volumes"
          ]
        },
        "scope": {
          "includes": ["package.json"],
          "excludes": ["sub-package package.json files"],
          "restrictions": "Only add scripts section entries"
        }
      },
      "resource_requirements": {
        "estimated": {
          "cpu_cores": 1,
          "memory_mb": 128,
          "exclusive_resources": ["package_json"]
        }
      },
      "skillsRequired": ["npm", "javascript"],
      "duration": {
        "optimistic": 0.25,
        "mostLikely": 0.5,
        "pessimistic": 1
      },
      "durationUnits": "hours"
    },
    {
      "id": "P1.T006",
      "feature_id": "F004",
      "title": "Setup pre-push git hook",
      "description": "Configure git hook to run CI simulation before push",
      "category": "integration",
      "boundaries": {
        "expected_complexity": {
          "value": "~30 LoC",
          "breakdown": "Hook script (20 LoC), Installation script (10 LoC)"
        },
        "definition_of_done": {
          "criteria": [
            "Hook runs on git push",
            "Blocks push if CI fails",
            "Supports --no-verify bypass",
            "Shows clear progress feedback"
          ]
        },
        "scope": {
          "includes": [".githooks/pre-push", "scripts/setup-hooks.sh"],
          "excludes": ["other git hooks", "CI scripts"]
        }
      },
      "resource_requirements": {
        "estimated": {
          "cpu_cores": 1,
          "memory_mb": 128
        }
      },
      "skillsRequired": ["git", "bash"],
      "duration": {
        "optimistic": 0.5,
        "mostLikely": 1,
        "pessimistic": 1.5
      },
      "durationUnits": "hours"
    },
    {
      "id": "P1.T007",
      "feature_id": "F002",
      "title": "Integrate change detection with orchestration",
      "description": "Connect detect-changes.sh output to ci-local.sh execution",
      "category": "integration",
      "boundaries": {
        "expected_complexity": {
          "value": "~40 LoC",
          "breakdown": "Integration logic (25 LoC), Error handling (15 LoC)"
        },
        "definition_of_done": {
          "criteria": [
            "CI runs only affected tests",
            "Execution time reduced by 50%+ for single-app changes",
            "Fallback to full CI on detection failure"
          ]
        },
        "scope": {
          "includes": ["scripts/ci-local.sh", "scripts/detect-changes.sh"],
          "excludes": ["Docker configuration", "test files"]
        }
      },
      "resource_requirements": {
        "estimated": {
          "cpu_cores": 1,
          "memory_mb": 256
        }
      },
      "skillsRequired": ["bash", "integration"],
      "duration": {
        "optimistic": 0.5,
        "mostLikely": 1,
        "pessimistic": 1.5
      },
      "durationUnits": "hours"
    },
    {
      "id": "P1.T008",
      "feature_id": "F005",
      "title": "Add performance monitoring",
      "description": "Implement timing reports and metrics collection",
      "category": "optimization",
      "boundaries": {
        "expected_complexity": {
          "value": "~60 LoC",
          "breakdown": "Timer functions (20 LoC), Report generation (25 LoC), Output formatting (15 LoC)"
        },
        "definition_of_done": {
          "criteria": [
            "Reports show phase-by-phase timing",
            "Identifies slowest operations",
            "Saves metrics to log file",
            "Shows comparison to target times"
          ]
        },
        "scope": {
          "includes": ["scripts/ci-local.sh", "scripts/ci-metrics.sh"],
          "excludes": ["external monitoring tools"]
        }
      },
      "resource_requirements": {
        "estimated": {
          "cpu_cores": 1,
          "memory_mb": 128
        }
      },
      "skillsRequired": ["bash", "monitoring"],
      "duration": {
        "optimistic": 1,
        "mostLikely": 1.5,
        "pessimistic": 2
      },
      "durationUnits": "hours"
    },
    {
      "id": "P1.T009",
      "feature_id": "F001",
      "title": "Create CI setup documentation",
      "description": "Write comprehensive setup and troubleshooting documentation",
      "category": "documentation",
      "boundaries": {
        "expected_complexity": {
          "value": "~200 lines",
          "breakdown": "Setup guide (100 lines), Troubleshooting (50 lines), FAQ (50 lines)"
        },
        "definition_of_done": {
          "criteria": [
            "Covers all setup steps",
            "Includes system requirements",
            "Has troubleshooting section",
            "Contains usage examples"
          ]
        },
        "scope": {
          "includes": ["docs/ci-local-setup.md", "README updates"],
          "excludes": ["code changes", "script modifications"]
        }
      },
      "resource_requirements": {
        "estimated": {
          "cpu_cores": 1,
          "memory_mb": 128
        }
      },
      "skillsRequired": ["documentation", "technical-writing"],
      "duration": {
        "optimistic": 1,
        "mostLikely": 2,
        "pessimistic": 3
      },
      "durationUnits": "hours"
    },
    {
      "id": "P1.T010",
      "feature_id": "F005",
      "title": "Validate CI correlation",
      "description": "Test and validate that local CI matches GitHub Actions results",
      "category": "validation",
      "boundaries": {
        "expected_complexity": {
          "value": "~30 test scenarios",
          "breakdown": "Success cases (20), Failure cases (10)"
        },
        "definition_of_done": {
          "criteria": [
            "95%+ correlation with GitHub Actions",
            "All false positives identified and fixed",
            "Validation report generated",
            "Edge cases documented"
          ]
        },
        "scope": {
          "includes": ["test scenarios", "validation scripts"],
          "excludes": ["core implementation changes"]
        }
      },
      "resource_requirements": {
        "estimated": {
          "cpu_cores": 2,
          "memory_mb": 1024
        }
      },
      "skillsRequired": ["testing", "validation"],
      "duration": {
        "optimistic": 2,
        "mostLikely": 3,
        "pessimistic": 4
      },
      "durationUnits": "hours"
    }
  ],
  "dependencies": [
    {
      "from": "P1.T001",
      "to": "P1.T002",
      "type": "technical",
      "reason": "Orchestration script needs Docker environment configured",
      "confidence": 1.0,
      "isHard": true
    },
    {
      "from": "P1.T002",
      "to": "P1.T007",
      "type": "technical",
      "reason": "Integration requires working orchestration script",
      "confidence": 1.0,
      "isHard": true
    },
    {
      "from": "P1.T003",
      "to": "P1.T007",
      "type": "technical",
      "reason": "Integration requires change detection algorithm",
      "confidence": 1.0,
      "isHard": true
    },
    {
      "from": "P1.T001",
      "to": "P1.T004",
      "type": "technical",
      "reason": "Caching requires base Docker configuration",
      "confidence": 0.9,
      "isHard": true
    },
    {
      "from": "P1.T002",
      "to": "P1.T005",
      "type": "sequential",
      "reason": "npm scripts wrap orchestration script",
      "confidence": 0.85,
      "isHard": true
    },
    {
      "from": "P1.T005",
      "to": "P1.T006",
      "type": "sequential",
      "reason": "Git hook calls npm scripts",
      "confidence": 0.9,
      "isHard": true
    },
    {
      "from": "P1.T007",
      "to": "P1.T008",
      "type": "sequential",
      "reason": "Monitor integrated solution performance",
      "confidence": 0.8,
      "isHard": false
    },
    {
      "from": "P1.T008",
      "to": "P1.T009",
      "type": "knowledge",
      "reason": "Documentation includes performance characteristics",
      "confidence": 0.8,
      "isHard": false
    },
    {
      "from": "P1.T007",
      "to": "P1.T010",
      "type": "sequential",
      "reason": "Validate complete integrated solution",
      "confidence": 0.95,
      "isHard": true
    },
    {
      "from": "P1.T001",
      "to": "P1.T005",
      "type": "mutual_exclusion",
      "reason": "Both modify docker-compose.ci.yml",
      "shared_resource": "docker_compose_file",
      "confidence": 1.0,
      "isHard": true
    }
  ]
}